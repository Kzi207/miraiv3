const fs = require('fs-extra');
const path = require('path');

module.exports = function({ api, models, Users, Threads, Currencies }) {
  
  // H√†m ki·ªÉm tra tin nh·∫Øn c√≥ ch·ª©a t·ª´ "su" kh√¥ng
  function containsSu(text) {
    if (!text || typeof text !== 'string') return false;
    
    // Chu·∫©n h√≥a vƒÉn b·∫£n
    const normalizedText = text.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "");
    
    // C√°c pattern ƒë·ªÉ nh·∫≠n di·ªán t·ª´ "su"
    const suPatterns = [
      /\bsu\b/i,                    // t·ª´ "su" ƒë·ªôc l·∫≠p
      /\bsu\s+/i,                   // "su" + kho·∫£ng tr·∫Øng
      /\s+su\b/i,                   // kho·∫£ng tr·∫Øng + "su"
      /\bsu\?/i,                    // "su?"
      /\bsu!/i,                     // "su!"
      /\bsu~/i,                     // "su~"
      /\bsu,/i,                     // "su,"
      /\bsu\./i,                    // "su."
      /\bsu:/i,                     // "su:"
      /\bsu;/,                      // "su;"
      /\bsu\s*[a-zA-Z]/i,          // "su" + ch·ªØ c√°i
      /[a-zA-Z]\s*su\b/i,          // ch·ªØ c√°i + "su"
      /\bsu\s*[0-9]/i,             // "su" + s·ªë
      /[0-9]\s*su\b/i,             // s·ªë + "su"
      /\bsu\s*[^\w\s]/i,           // "su" + k√Ω t·ª± ƒë·∫∑c bi·ªát
      /[^\w\s]\s*su\b/i            // k√Ω t·ª± ƒë·∫∑c bi·ªát + "su"
    ];
    
    // Ki·ªÉm tra c√°c pattern
    for (const pattern of suPatterns) {
      if (pattern.test(normalizedText)) {
        return true;
      }
    }
    
    // Ki·ªÉm tra c√°c bi·∫øn th·ªÉ kh√°c
    const suVariants = [
      'su', 'Su', 'SU', 'sU', 'Su',
      'su!', 'su?', 'su~', 'su,', 'su.',
      'su:', 'su;', 'su...', 'su...',
      'suuu', 'suuuu', 'suuuuu',"Oanh","oanh","b√©","B√©","b√© Oanh","B√© oanh"
    ];
    
    for (const variant of suVariants) {
      if (normalizedText.includes(variant.toLowerCase())) {
        return true;
      }
    }
    
    return false;
  }

  // H√†m ki·ªÉm tra tin nh·∫Øn c√≥ ph·∫£i l√† l·ªánh kh√¥ng
  function isCommand(text) {
    if (!text || typeof text !== 'string') return false;
    
    const trimmedText = text.trim().toLowerCase();
    
    // Ki·ªÉm tra prefix l·ªánh
    const prefix = global.config.PREFIX || '.';
    if (trimmedText.startsWith(prefix)) {
      // N·∫øu l√† l·ªánh .su th√¨ coi nh∆∞ l√† l·ªánh (kh√¥ng x·ª≠ l√Ω ·ªü ƒë√¢y)
      if (trimmedText.startsWith(prefix + 'su')) {
        return true;
      }
      return true;
    }
    
    // Ki·ªÉm tra c√°c t·ª´ kh√≥a l·ªánh
    const commandKeywords = [
      'help', 'info', 'kick', 'ban', 'unban',
      'admin', 'mod', 'mute', 'unmute', 'warn',
      'clear', 'delete', 'edit', 'pin', 'unpin'
    ];
    
    for (const keyword of commandKeywords) {
      if (trimmedText.toLowerCase().includes(keyword)) {
        return true;
      }
    }
    
    return false;
  }

  // H√†m ki·ªÉm tra tin nh·∫Øn c√≥ ph·∫£i l√† mention bot kh√¥ng
  function isBotMention(text, botName) {
    if (!text || typeof text !== 'string') return false;
    
    const normalizedText = text.toLowerCase();
    const normalizedBotName = botName.toLowerCase();
    
    // Ki·ªÉm tra mention tr·ª±c ti·∫øp
    if (normalizedText.includes(`@${normalizedBotName}`)) {
      return true;
    }
    
    // Ki·ªÉm tra g·ªçi t√™n bot
    const botNamePatterns = [
      new RegExp(`\\b${normalizedBotName}\\b`, 'i'),
      new RegExp(`\\b${normalizedBotName}\\?`, 'i'),
      new RegExp(`\\b${normalizedBotName}!`, 'i'),
      new RegExp(`\\b${normalizedBotName}~`, 'i'),
      new RegExp(`\\b${normalizedBotName},`, 'i'),
      new RegExp(`\\b${normalizedBotName}\\.`, 'i')
    ];
    
    for (const pattern of botNamePatterns) {
      if (pattern.test(normalizedText)) {
        return true;
      }
    }
    
    return false;
  }

  // H√†m x·ª≠ l√Ω tin nh·∫Øn v√† ch·∫°y l·ªánh su.js
  async function handleSuMessage({ api, event }) {
    try {
      const { threadID, messageID, senderID, body, type } = event;
      
      // Ch·ªâ x·ª≠ l√Ω tin nh·∫Øn text
      if (type !== 'message' || !body || typeof body !== 'string') {
        return;
      }
      
      const trimmedBody = body.trim();
      
      // B·ªè qua tin nh·∫Øn r·ªóng
      if (!trimmedBody) {
        return;
      }
      
      // B·ªè qua tin nh·∫Øn t·ª´ bot
      if (senderID === api.getCurrentUserID()) {
        return;
      }
      
      // Ki·ªÉm tra tin nh·∫Øn c√≥ ch·ª©a t·ª´ "su" kh√¥ng
      if (!containsSu(trimmedBody)) {
        return;
      }
      
      // B·ªè qua n·∫øu l√† l·ªánh (ƒë·ªÉ tr√°nh conflict)
      if (isCommand(trimmedBody)) {
        return;
      }
      
      // Ki·ªÉm tra bot name trong config
      const botName = global.config.BOTNAME || 'Mirai-V3-Unofficial';
      const isBotMentioned = isBotMention(trimmedBody, botName);
      
      // N·∫øu kh√¥ng ph·∫£i mention bot v√† kh√¥ng c√≥ t·ª´ "su" r√µ r√†ng, b·ªè qua
      if (!isBotMentioned && !trimmedBody.toLowerCase().includes('su')) {
        return;
      }
      
      console.log(`üîç Ph√°t hi·ªán tin nh·∫Øn c√≥ t·ª´ "su" t·ª´ ${senderID} trong nh√≥m ${threadID}`);
      
      // G·ªçi l·ªánh su.js th√¥ng qua global.client.commands
      try {
        const suCommand = global.client.commands.get('su');
        if (suCommand) {
          // T·∫°o event gi·∫£ ƒë·ªÉ ch·∫°y l·ªánh su.js
          const fakeEvent = {
            threadID: threadID,
            messageID: messageID,
            senderID: senderID,
            body: trimmedBody,
            type: 'message',
            mentions: event.mentions || []
          };
          
          console.log(`üöÄ ƒêang chuy·ªÉn h∆∞·ªõng ƒë·∫øn l·ªánh su.js cho tin nh·∫Øn: "${trimmedBody}"`);
          await suCommand.run({ api, event: fakeEvent, args: [] });
        } else {
          console.log('‚ùå Kh√¥ng t√¨m th·∫•y module su.js');
        }
      } catch (error) {
        console.error('‚ùå L·ªói khi chuy·ªÉn h∆∞·ªõng ƒë·∫øn su.js:', error);
      }
      
      console.log(`‚úÖ ƒê√£ x·ª≠ l√Ω th√†nh c√¥ng tin nh·∫Øn c√≥ t·ª´ "su"`);
      
    } catch (error) {
      console.error('‚ùå L·ªói khi x·ª≠ l√Ω tin nh·∫Øn c√≥ t·ª´ "su":', error);
    }
  }

  // H√†m x·ª≠ l√Ω event ch√≠nh
  async function handleEvent({ api, event }) {
    try {
      // X·ª≠ l√Ω tin nh·∫Øn c√≥ t·ª´ "su"
      await handleSuMessage({ api, event });
    } catch (error) {
      console.error('‚ùå L·ªói trong HandSu handler:', error);
    }
  }

  // Return c√°c h√†m c·∫ßn thi·∫øt
  return {
    handleEvent
  };
};
